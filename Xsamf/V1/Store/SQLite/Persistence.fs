//----------------------------------------------------------------------------------- 
// <auto-generated>                                                                   
//     This code was generated via Freql.Tools (https://github.com/mc738/Freql).      
//                                                                                    
//     Manual changes to this file may cause unexpected behavior in your application. 
//     Manual changes to this file will be overwritten if the code is regenerated.    
// </auto-generated>                                                                  
//----------------------------------------------------------------------------------- 

namespace Xsamf.V1.Store.SQLite.Persistence

open System
open System.Text.Json.Serialization
open Freql.Core.Common
open Freql.Sqlite

module private Utils =

    open System.Text.RegularExpressions

    let updateCheckIfExists (update: bool) (name: string) (value: string) =
        match update with
        | false -> value
        | true ->
            let regex = Regex($"CREATE {name}")

            regex.Replace(value, $"CREATE {name} IF NOT EXISTS", 1)

/// <summary>
/// Records representing database bindings for `records`.
/// </summary>
/// <remarks>
/// Module generated on 29/09/2024 20:02:13 (utc) via Freql.Tools.
/// </remarks>
[<RequireQualifiedAccess>]
module Records =
    /// <summary>
    /// A record representing a row in the table `activity_watcher`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type ActivityWatcher =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: int64 option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              EntityId = String.Empty
              Name = String.Empty
              Description = None
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_watcher
(
    id          TEXT    not null
        constraint activity_watcher_pk
            primary key,
    entity_id   TEXT    not null
        constraint activity_watcher_entities_id_fk
            references entities,
    name        TEXT    not null,
    description integer,
    created_on  TEXT    not null,
    updated_on  TEXT    not null,
    active      INTEGER not null,
    constraint activity_watcher_pk_2
        unique (entity_id, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_watcher.`id`,
              activity_watcher.`entity_id`,
              activity_watcher.`name`,
              activity_watcher.`description`,
              activity_watcher.`created_on`,
              activity_watcher.`updated_on`,
              activity_watcher.`active`
        FROM activity_watcher
        """
    
        static member TableName() = "activity_watcher"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityWatcher.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityWatcher.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityWatcher.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_watcher_version`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type ActivityWatcherVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("watcherId")>] WatcherId: string
          [<JsonPropertyName("version")>] Version: int64
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              WatcherId = String.Empty
              Version = 0L
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_watcher_version
(
    id         TEXT    not null
        constraint activity_watcher_version_pk
            primary key,
    watcher_id TEXT    not null
        constraint activity_watcher_version_activity_watcher_id_fk
            references activity_watcher,
    version    integer not null,
    created_on TEXT    not null,
    updated_on TEXT    not null,
    active     integer not null,
    constraint activity_watcher_version_uk
        unique (watcher_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_watcher_version.`id`,
              activity_watcher_version.`watcher_id`,
              activity_watcher_version.`version`,
              activity_watcher_version.`created_on`,
              activity_watcher_version.`updated_on`,
              activity_watcher_version.`active`
        FROM activity_watcher_version
        """
    
        static member TableName() = "activity_watcher_version"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityWatcherVersion.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityWatcherVersion.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityWatcherVersion.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `entities`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type Entity =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty
              Description = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "entities"
(
    id          TEXT    not null
        constraint entities_pk
            primary key,
    tenant_id   TEXT    not null
        constraint entities_tenants_id_fk
            references tenants,
    name        TEXT    not null,
    description TEXT    not null,
    created_on  TEXT    not null,
    updated_on  TEXT    not null,
    active      integer not null,
    constraint entities_uk
        unique (tenant_id, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              entities.`id`,
              entities.`tenant_id`,
              entities.`name`,
              entities.`description`,
              entities.`created_on`,
              entities.`updated_on`,
              entities.`active`
        FROM entities
        """
    
        static member TableName() = "entities"
    
        static member CreateIndexesSql() =
            [ """
              CREATE INDEX entities_name_index
    on entities (name)
              """ ]
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Entity.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Entity.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Entity.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `entity_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type EntityMetadata =
        { [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { EntityId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE entity_metadata
(
    entity_id  TEXT not null
        constraint entity_metadata_entities_id_fk
            references entities,
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint entity_metadata_pk
        primary key (entity_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              entity_metadata.`entity_id`,
              entity_metadata.`item_key`,
              entity_metadata.`item_value`
        FROM entity_metadata
        """
    
        static member TableName() = "entity_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ EntityMetadata.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  EntityMetadata.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  EntityMetadata.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `entity_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type EntityTags =
        { [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("tag")>] Tag: int64 option }
    
        static member Blank() =
            { EntityId = String.Empty
              Tag = None }
    
        static member CreateTableSql() = """
        CREATE TABLE entity_tags
(
    entity_id TEXT not null
        constraint entity_tags_entities_id_fk
            references entities,
    tag       integer,
    constraint entity_tags_pk
        primary key (entity_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              entity_tags.`entity_id`,
              entity_tags.`tag`
        FROM entity_tags
        """
    
        static member TableName() = "entity_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ EntityTags.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  EntityTags.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  EntityTags.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_entity_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type ProjectEntityLinks =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              EntityId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE project_entity_links
(
    id         TEXT    not null
        constraint project_entity_links_pk
            primary key,
    project_id TEXT    not null
        constraint project_entity_links_projects_id_fk
            references projects,
    entity_id  TEXT    not null
        constraint project_entity_links_entities_id_fk
            references entities,
    created_on TEXT    not null,
    updated_on TEXT    not null,
    active     integer not null,
    constraint project_entry_links_uk
        unique (project_id, entity_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_entity_links.`id`,
              project_entity_links.`project_id`,
              project_entity_links.`entity_id`,
              project_entity_links.`created_on`,
              project_entity_links.`updated_on`,
              project_entity_links.`active`
        FROM project_entity_links
        """
    
        static member TableName() = "project_entity_links"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectEntityLinks.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectEntityLinks.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectEntityLinks.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_entity_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type ProjectEntityMetadata =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { LinkId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE project_entity_metadata
(
    link_id    TEXT not null
        constraint project_entity_metadata_project_entity_links_id_fk
            references project_entity_links,
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint project_entity_metadata_pk
        primary key (link_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_entity_metadata.`link_id`,
              project_entity_metadata.`item_key`,
              project_entity_metadata.`item_value`
        FROM project_entity_metadata
        """
    
        static member TableName() = "project_entity_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectEntityMetadata.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectEntityMetadata.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectEntityMetadata.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type ProjectTags =
        { [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ProjectId = String.Empty
              Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE project_tags
(
    project_id TEXT not null
        constraint project_tags_projects_id_fk
            references projects,
    tag        TEXT not null,
    constraint project_tags_pk
        primary key (project_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_tags.`project_id`,
              project_tags.`tag`
        FROM project_tags
        """
    
        static member TableName() = "project_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectTags.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectTags.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectTags.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_team_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type ProjectTeamClaim =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { LinkId = String.Empty
              Claim = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "project_team_claims"
(
    link_id TEXT not null
        constraint project_team_claims_project_team_links_id_fk
            references project_team_links,
    claim   TEXT not null,
    constraint project_team_claims_pk
        primary key (link_id, claim)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_team_claims.`link_id`,
              project_team_claims.`claim`
        FROM project_team_claims
        """
    
        static member TableName() = "project_team_claims"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectTeamClaim.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectTeamClaim.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectTeamClaim.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_team_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type ProjectTeamLink =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("teamId")>] TeamId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              TeamId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "project_team_links"
(
    id         TEXT    not null
        constraint project_team_links_pk
            primary key,
    project_id TEXT    not null
        constraint project_team_links_projects_id_fk
            references projects,
    team_id    TEXT    not null
        constraint project_team_links_teams_id_fk
            references teams,
    created_on TEXT    not null,
    updated_on TEXT    not null,
    active     integer not null,
    constraint project_team_links_uk
        unique (project_id, team_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_team_links.`id`,
              project_team_links.`project_id`,
              project_team_links.`team_id`,
              project_team_links.`created_on`,
              project_team_links.`updated_on`,
              project_team_links.`active`
        FROM project_team_links
        """
    
        static member TableName() = "project_team_links"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() =
            [ """
              CREATE TRIGGER project_team_links_before_insert_ensure_tenant_ids_match_trigger
    BEFORE INSERT ON project_team_links
    BEGIN
        SELECT RAISE(ABORT, 'A project and team must belong to the same tenant if they are to be linked.')
        WHERE (SELECT tenant_id FROM teams WHERE teams.id = NEW.team_id) != 
              (SELECT tenant_id FROM projects WHERE projects.id = NEW.project_id);
    END
              """ ]
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectTeamLink.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectTeamLink.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectTeamLink.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_team_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type ProjectTeamMetadata =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { LinkId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "project_team_metadata"
(
    link_id    TEXT not null
        constraint project_team_metadata_project_team_links_id_fk
            references project_team_links (id),
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint project_team_metadata_pk
        primary key (link_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_team_metadata.`link_id`,
              project_team_metadata.`item_key`,
              project_team_metadata.`item_value`
        FROM project_team_metadata
        """
    
        static member TableName() = "project_team_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectTeamMetadata.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectTeamMetadata.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectTeamMetadata.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `projects`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type Project =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool option }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = None }
    
        static member CreateTableSql() = """
        CREATE TABLE "projects"
(
    id         TEXT not null
        constraint projects_pk
            primary key,
    tenant_id  TEXT not null
        constraint projects_tenants_id_fk
            references tenants,
    name       TEXT not null,
    created_on TEXT not null,
    updated_on TEXT not null,
    active     integer
)
        """
    
        static member SelectSql() = """
        SELECT
              projects.`id`,
              projects.`tenant_id`,
              projects.`name`,
              projects.`created_on`,
              projects.`updated_on`,
              projects.`active`
        FROM projects
        """
    
        static member TableName() = "projects"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Project.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Project.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Project.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `team_user_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type TeamUserClaim =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { LinkId = String.Empty
              Claim = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "team_user_claims"
(
    link_id TEXT not null
        constraint team_user_claims_project_team_links_id_fk
            references project_team_links (id),
    claim   TEXT not null,
    constraint team_user_claims_pk
        primary key (link_id, claim)
)
        """
    
        static member SelectSql() = """
        SELECT
              team_user_claims.`link_id`,
              team_user_claims.`claim`
        FROM team_user_claims
        """
    
        static member TableName() = "team_user_claims"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ TeamUserClaim.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  TeamUserClaim.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  TeamUserClaim.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `team_users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type TeamUser =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("teamId")>] TeamId: string
          [<JsonPropertyName("userId")>] UserId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TeamId = String.Empty
              UserId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "team_users"
(
    id         TEXT    not null
        constraint team_users_pk
            primary key,
    team_id    TEXT    not null
        constraint team_user_team_id_fk
            references teams,
    user_id    TEXT    not null
        constraint team_user_users_id_fk
            references users,
    created_on TEXT    not null,
    updated_on TEXT    not null,
    active     integer not null,
    constraint team_user_uk
        unique (team_id, user_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              team_users.`id`,
              team_users.`team_id`,
              team_users.`user_id`,
              team_users.`created_on`,
              team_users.`updated_on`,
              team_users.`active`
        FROM team_users
        """
    
        static member TableName() = "team_users"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ TeamUser.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  TeamUser.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  TeamUser.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `teams`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type Team =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "teams"
(
    id        TEXT not null
        constraint teams_pk
            primary key,
    tenant_id TEXT not null
        constraint teams_tenants_id_fk
            references tenants,
    name      TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              teams.`id`,
              teams.`tenant_id`,
              teams.`name`
        FROM teams
        """
    
        static member TableName() = "teams"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Team.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Team.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Team.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `tenant_user_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type TenantUserClaim =
        { [<JsonPropertyName("tenantUserId")>] TenantUserId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { TenantUserId = String.Empty
              Claim = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "tenant_user_claims"
(
    tenant_user_id TEXT not null
        constraint tenant_user_claims_tenant_users_id_fk
            references tenant_users,
    claim          TEXT not null,
    constraint tenant_user_claims_pk
        primary key (tenant_user_id, claim)
)
        """
    
        static member SelectSql() = """
        SELECT
              tenant_user_claims.`tenant_user_id`,
              tenant_user_claims.`claim`
        FROM tenant_user_claims
        """
    
        static member TableName() = "tenant_user_claims"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ TenantUserClaim.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  TenantUserClaim.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  TenantUserClaim.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `tenant_user_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type TenantUserMetadataItem =
        { [<JsonPropertyName("tenantUserId")>] TenantUserId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { TenantUserId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "tenant_user_metadata"
(
    tenant_user_id TEXT not null
        constraint tenant_user_metadata_tenant_users_id_fk
            references tenant_users,
    item_key       TEXT not null,
    item_value     TEXT not null,
    constraint tenant_user_metadata_pk
        primary key (tenant_user_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              tenant_user_metadata.`tenant_user_id`,
              tenant_user_metadata.`item_key`,
              tenant_user_metadata.`item_value`
        FROM tenant_user_metadata
        """
    
        static member TableName() = "tenant_user_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ TenantUserMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  TenantUserMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  TenantUserMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `tenant_users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type TenantUser =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("userId")>] UserId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              UserId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "tenant_users"
(
    id         TEXT    not null
        constraint tenant_users_pk
            primary key,
    tenant_id  TEXT    not null
        constraint tenant_users_tenants_id_fk
            references tenants,
    user_id    TEXT    not null
        constraint tenant_users_users_id_fk
            references users,
    created_on TEXT    not null,
    updated_on TEXT    not null,
    active     integer not null,
    constraint tenant_users_uk
        unique (tenant_id, user_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              tenant_users.`id`,
              tenant_users.`tenant_id`,
              tenant_users.`user_id`,
              tenant_users.`created_on`,
              tenant_users.`updated_on`,
              tenant_users.`active`
        FROM tenant_users
        """
    
        static member TableName() = "tenant_users"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ TenantUser.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  TenantUser.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  TenantUser.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `tenants`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type Tenant =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "tenants"
(
    id     TEXT    not null
        constraint tenants_pk
            primary key,
    name   TEXT    not null,
    active integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              tenants.`id`,
              tenants.`name`,
              tenants.`active`
        FROM tenants
        """
    
        static member TableName() = "tenants"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Tenant.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Tenant.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Tenant.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type User =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("systemUser")>] SystemUser: int64
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              SystemUser = 0L
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "users"
(
    id          TEXT    not null
        constraint users_pk
            primary key,
    name        TEXT    not null,
    created_on  TEXT    not null,
    updated_on  TEXT    not null,
    system_user integer not null,
    active      integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              users.`id`,
              users.`name`,
              users.`created_on`,
              users.`updated_on`,
              users.`system_user`,
              users.`active`
        FROM users
        """
    
        static member TableName() = "users"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ User.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  User.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  User.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
/// Module generated on 29/09/2024 20:02:13 (utc) via Freql.Tools.
[<RequireQualifiedAccess>]
module Parameters =
    /// <summary>
    /// A record representing a new row in the table `activity_watcher`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewActivityWatcher =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: int64 option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              EntityId = String.Empty
              Name = String.Empty
              Description = None
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `activity_watcher_version`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewActivityWatcherVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("watcherId")>] WatcherId: string
          [<JsonPropertyName("version")>] Version: int64
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              WatcherId = String.Empty
              Version = 0L
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `entities`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewEntity =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty
              Description = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `entity_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewEntityMetadata =
        { [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { EntityId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `entity_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewEntityTags =
        { [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("tag")>] Tag: int64 option }
    
        static member Blank() =
            { EntityId = String.Empty
              Tag = None }
    
    /// <summary>
    /// A record representing a new row in the table `project_entity_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewProjectEntityLinks =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              EntityId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `project_entity_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewProjectEntityMetadata =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { LinkId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `project_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewProjectTags =
        { [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ProjectId = String.Empty
              Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `project_team_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewProjectTeamClaim =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { LinkId = String.Empty
              Claim = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `project_team_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewProjectTeamLink =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("teamId")>] TeamId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              TeamId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `project_team_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewProjectTeamMetadata =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { LinkId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `projects`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewProject =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool option }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = None }
    
    /// <summary>
    /// A record representing a new row in the table `team_user_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewTeamUserClaim =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { LinkId = String.Empty
              Claim = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `team_users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewTeamUser =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("teamId")>] TeamId: string
          [<JsonPropertyName("userId")>] UserId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TeamId = String.Empty
              UserId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `teams`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewTeam =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `tenant_user_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewTenantUserClaim =
        { [<JsonPropertyName("tenantUserId")>] TenantUserId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { TenantUserId = String.Empty
              Claim = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `tenant_user_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewTenantUserMetadataItem =
        { [<JsonPropertyName("tenantUserId")>] TenantUserId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { TenantUserId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `tenant_users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewTenantUser =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("userId")>] UserId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              UserId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `tenants`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewTenant =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    type NewUser =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("systemUser")>] SystemUser: int64
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              SystemUser = 0L
              Active = true }
    
/// Module generated on 29/09/2024 20:02:13 (utc) via Freql.Tools.
[<RequireQualifiedAccess>]
module Operations =

    let buildSql (lines: string list) = lines |> String.concat Environment.NewLine

    /// <summary>
    /// Select a `Records.ActivityWatcher` from the table `activity_watcher`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityWatcher&gt;` and uses Records.ActivityWatcher.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcher.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityWatcher>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityWatcher&gt;` and uses Records.ActivityWatcher.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcher.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityWatcher>(sql, parameters)
    
    let insertActivityWatcher (context: SqliteContext) (parameters: Parameters.NewActivityWatcher) =
        context.Insert("activity_watcher", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityWatcherVersion` from the table `activity_watcher_version`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityWatcherVersion&gt;` and uses Records.ActivityWatcherVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcherVersion.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityWatcherVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityWatcherVersion&gt;` and uses Records.ActivityWatcherVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcherVersion.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityWatcherVersion>(sql, parameters)
    
    let insertActivityWatcherVersion (context: SqliteContext) (parameters: Parameters.NewActivityWatcherVersion) =
        context.Insert("activity_watcher_version", parameters)
    
    /// <summary>
    /// Select a `Records.Entity` from the table `entities`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Entity&gt;` and uses Records.Entity.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Entity.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Entity>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Entity&gt;` and uses Records.Entity.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Entity.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Entity>(sql, parameters)
    
    let insertEntity (context: SqliteContext) (parameters: Parameters.NewEntity) =
        context.Insert("entities", parameters)
    
    /// <summary>
    /// Select a `Records.EntityMetadata` from the table `entity_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.EntityMetadata&gt;` and uses Records.EntityMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EntityMetadata.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.EntityMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.EntityMetadata&gt;` and uses Records.EntityMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EntityMetadata.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.EntityMetadata>(sql, parameters)
    
    let insertEntityMetadata (context: SqliteContext) (parameters: Parameters.NewEntityMetadata) =
        context.Insert("entity_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.EntityTags` from the table `entity_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.EntityTags&gt;` and uses Records.EntityTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EntityTags.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.EntityTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.EntityTags&gt;` and uses Records.EntityTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EntityTags.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.EntityTags>(sql, parameters)
    
    let insertEntityTags (context: SqliteContext) (parameters: Parameters.NewEntityTags) =
        context.Insert("entity_tags", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectEntityLinks` from the table `project_entity_links`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectEntityLinks&gt;` and uses Records.ProjectEntityLinks.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEntityLinksRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEntityLinksRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEntityLinks.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectEntityLinks>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectEntityLinks&gt;` and uses Records.ProjectEntityLinks.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEntityLinksRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEntityLinksRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEntityLinks.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectEntityLinks>(sql, parameters)
    
    let insertProjectEntityLinks (context: SqliteContext) (parameters: Parameters.NewProjectEntityLinks) =
        context.Insert("project_entity_links", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectEntityMetadata` from the table `project_entity_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectEntityMetadata&gt;` and uses Records.ProjectEntityMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEntityMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEntityMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEntityMetadata.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectEntityMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectEntityMetadata&gt;` and uses Records.ProjectEntityMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEntityMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEntityMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEntityMetadata.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectEntityMetadata>(sql, parameters)
    
    let insertProjectEntityMetadata (context: SqliteContext) (parameters: Parameters.NewProjectEntityMetadata) =
        context.Insert("project_entity_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectTags` from the table `project_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectTags&gt;` and uses Records.ProjectTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTags.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectTags&gt;` and uses Records.ProjectTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTags.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectTags>(sql, parameters)
    
    let insertProjectTags (context: SqliteContext) (parameters: Parameters.NewProjectTags) =
        context.Insert("project_tags", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectTeamClaim` from the table `project_team_claims`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectTeamClaim&gt;` and uses Records.ProjectTeamClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamClaimRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamClaimRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamClaim.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectTeamClaim>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectTeamClaim&gt;` and uses Records.ProjectTeamClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamClaimRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamClaimRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamClaim.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectTeamClaim>(sql, parameters)
    
    let insertProjectTeamClaim (context: SqliteContext) (parameters: Parameters.NewProjectTeamClaim) =
        context.Insert("project_team_claims", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectTeamLink` from the table `project_team_links`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectTeamLink&gt;` and uses Records.ProjectTeamLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamLinkRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamLinkRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamLink.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectTeamLink>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectTeamLink&gt;` and uses Records.ProjectTeamLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamLinkRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamLinkRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamLink.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectTeamLink>(sql, parameters)
    
    let insertProjectTeamLink (context: SqliteContext) (parameters: Parameters.NewProjectTeamLink) =
        context.Insert("project_team_links", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectTeamMetadata` from the table `project_team_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectTeamMetadata&gt;` and uses Records.ProjectTeamMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamMetadata.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectTeamMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectTeamMetadata&gt;` and uses Records.ProjectTeamMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamMetadata.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectTeamMetadata>(sql, parameters)
    
    let insertProjectTeamMetadata (context: SqliteContext) (parameters: Parameters.NewProjectTeamMetadata) =
        context.Insert("project_team_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Project` from the table `projects`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Project&gt;` and uses Records.Project.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Project.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Project>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Project&gt;` and uses Records.Project.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Project.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Project>(sql, parameters)
    
    let insertProject (context: SqliteContext) (parameters: Parameters.NewProject) =
        context.Insert("projects", parameters)
    
    /// <summary>
    /// Select a `Records.TeamUserClaim` from the table `team_user_claims`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.TeamUserClaim&gt;` and uses Records.TeamUserClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamUserClaimRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamUserClaimRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TeamUserClaim.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.TeamUserClaim>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.TeamUserClaim&gt;` and uses Records.TeamUserClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamUserClaimRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamUserClaimRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TeamUserClaim.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.TeamUserClaim>(sql, parameters)
    
    let insertTeamUserClaim (context: SqliteContext) (parameters: Parameters.NewTeamUserClaim) =
        context.Insert("team_user_claims", parameters)
    
    /// <summary>
    /// Select a `Records.TeamUser` from the table `team_users`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.TeamUser&gt;` and uses Records.TeamUser.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamUserRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamUserRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TeamUser.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.TeamUser>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.TeamUser&gt;` and uses Records.TeamUser.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamUserRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamUserRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TeamUser.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.TeamUser>(sql, parameters)
    
    let insertTeamUser (context: SqliteContext) (parameters: Parameters.NewTeamUser) =
        context.Insert("team_users", parameters)
    
    /// <summary>
    /// Select a `Records.Team` from the table `teams`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Team&gt;` and uses Records.Team.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Team.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Team>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Team&gt;` and uses Records.Team.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Team.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Team>(sql, parameters)
    
    let insertTeam (context: SqliteContext) (parameters: Parameters.NewTeam) =
        context.Insert("teams", parameters)
    
    /// <summary>
    /// Select a `Records.TenantUserClaim` from the table `tenant_user_claims`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.TenantUserClaim&gt;` and uses Records.TenantUserClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserClaimRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserClaimRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUserClaim.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.TenantUserClaim>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.TenantUserClaim&gt;` and uses Records.TenantUserClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserClaimRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserClaimRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUserClaim.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.TenantUserClaim>(sql, parameters)
    
    let insertTenantUserClaim (context: SqliteContext) (parameters: Parameters.NewTenantUserClaim) =
        context.Insert("tenant_user_claims", parameters)
    
    /// <summary>
    /// Select a `Records.TenantUserMetadataItem` from the table `tenant_user_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.TenantUserMetadataItem&gt;` and uses Records.TenantUserMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUserMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.TenantUserMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.TenantUserMetadataItem&gt;` and uses Records.TenantUserMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUserMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.TenantUserMetadataItem>(sql, parameters)
    
    let insertTenantUserMetadataItem (context: SqliteContext) (parameters: Parameters.NewTenantUserMetadataItem) =
        context.Insert("tenant_user_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.TenantUser` from the table `tenant_users`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.TenantUser&gt;` and uses Records.TenantUser.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUser.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.TenantUser>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.TenantUser&gt;` and uses Records.TenantUser.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUser.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.TenantUser>(sql, parameters)
    
    let insertTenantUser (context: SqliteContext) (parameters: Parameters.NewTenantUser) =
        context.Insert("tenant_users", parameters)
    
    /// <summary>
    /// Select a `Records.Tenant` from the table `tenants`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Tenant&gt;` and uses Records.Tenant.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Tenant.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Tenant>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Tenant&gt;` and uses Records.Tenant.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Tenant.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Tenant>(sql, parameters)
    
    let insertTenant (context: SqliteContext) (parameters: Parameters.NewTenant) =
        context.Insert("tenants", parameters)
    
    /// <summary>
    /// Select a `Records.User` from the table `users`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.User&gt;` and uses Records.User.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectUserRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectUserRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.User.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.User>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.User&gt;` and uses Records.User.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 29/09/2024 20:02:13
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectUserRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectUserRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.User.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.User>(sql, parameters)
    
    let insertUser (context: SqliteContext) (parameters: Parameters.NewUser) =
        context.Insert("users", parameters)
    
[<RequireQualifiedAccess>]
module Initialization =
    let sql (checkIfExists: bool) =
        [ Records.Tenant.InitializationSql checkIfExists
          Records.User.InitializationSql checkIfExists
          Records.Project.InitializationSql checkIfExists
          Records.Team.InitializationSql checkIfExists
          Records.Entity.InitializationSql checkIfExists
          Records.TenantUser.InitializationSql checkIfExists
          Records.ProjectTeamLink.InitializationSql checkIfExists
          Records.ProjectEntityLinks.InitializationSql checkIfExists
          Records.ActivityWatcher.InitializationSql checkIfExists
          Records.TenantUserMetadataItem.InitializationSql checkIfExists
          Records.TenantUserClaim.InitializationSql checkIfExists
          Records.TeamUser.InitializationSql checkIfExists
          Records.TeamUserClaim.InitializationSql checkIfExists
          Records.ProjectTeamMetadata.InitializationSql checkIfExists
          Records.ProjectTeamClaim.InitializationSql checkIfExists
          Records.ProjectTags.InitializationSql checkIfExists
          Records.ProjectEntityMetadata.InitializationSql checkIfExists
          Records.EntityTags.InitializationSql checkIfExists
          Records.EntityMetadata.InitializationSql checkIfExists
          Records.ActivityWatcherVersion.InitializationSql checkIfExists ]
        |> List.concat

    let run (checkIfExists: bool) (ctx: SqliteContext) =
        sql checkIfExists |> List.iter (ctx.ExecuteSqlNonQuery >> ignore)

    let runInTransaction (checkIfExists: bool) (ctx: SqliteContext) =
        ctx.ExecuteInTransaction(fun t -> sql checkIfExists |> List.iter (t.ExecuteSqlNonQuery >> ignore))
