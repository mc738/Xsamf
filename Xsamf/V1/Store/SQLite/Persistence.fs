//----------------------------------------------------------------------------------- 
// <auto-generated>                                                                   
//     This code was generated via Freql.Tools (https://github.com/mc738/Freql).      
//                                                                                    
//     Manual changes to this file may cause unexpected behavior in your application. 
//     Manual changes to this file will be overwritten if the code is regenerated.    
// </auto-generated>                                                                  
//----------------------------------------------------------------------------------- 

namespace Xsamf.V1.Store.SQLite.Persistence

open System
open System.Text.Json.Serialization
open Freql.Core.Common
open Freql.Sqlite

module private Utils =

    open System.Text.RegularExpressions

    let updateCheckIfExists (update: bool) (name: string) (value: string) =
        match update with
        | false -> value
        | true ->
            let regex = Regex($"CREATE {name}")

            regex.Replace(value, $"CREATE {name} IF NOT EXISTS", 1)

/// <summary>
/// Records representing database bindings for `records`.
/// </summary>
/// <remarks>
/// Module generated on 07/10/2024 19:08:19 (utc) via Freql.Tools.
/// </remarks>
[<RequireQualifiedAccess>]
module Records =
    /// <summary>
    /// A record representing a row in the table `activities`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type Activity =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("watcherVersionId")>] WatcherVersionId: string
          [<JsonPropertyName("category")>] Category: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              WatcherVersionId = String.Empty
              Category = String.Empty
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE "activities"
(
    id                 TEXT not null
        constraint activities_pk
            primary key,
    watcher_version_id TEXT not null
        constraint activities_activity_watcher_versions_id_fk
            references activity_watcher_versions,
    category           TEXT not null,
    created_on         TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              activities.`id`,
              activities.`watcher_version_id`,
              activities.`category`,
              activities.`created_on`
        FROM activities
        """
    
        static member TableName() = "activities"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Activity.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Activity.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Activity.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_action_outcome_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityActionOutcomeVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("outcomeId")>] OutcomeId: string
          [<JsonPropertyName("version")>] Version: int64
          [<JsonPropertyName("name")>] Name: string option
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("outcomeBlob")>] OutcomeBlob: BlobField
          [<JsonPropertyName("outcomeBlobHash")>] OutcomeBlobHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              OutcomeId = String.Empty
              Version = 0L
              Name = None
              Description = String.Empty
              OutcomeBlob = BlobField.Empty()
              OutcomeBlobHash = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "activity_action_outcome_versions"
(
    id                TEXT    not null
        constraint activity_action_outcome_versions_pk
            primary key,
    outcome_id        TEXT    not null
        constraint activity_action_outcome_versions_activity_action_outcomes_id_fk
            references activity_action_outcomes,
    version           integer not null,
    name              TEXT,
    description       TEXT    not null,
    outcome_blob      BLOB    not null,
    outcome_blob_hash TEXT    not null,
    created_on        TEXT    not null,
    updated_on        TEXT    not null,
    active            integer not null,
    constraint activity_action_outcome_versions_uk
        unique (outcome_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_action_outcome_versions.`id`,
              activity_action_outcome_versions.`outcome_id`,
              activity_action_outcome_versions.`version`,
              activity_action_outcome_versions.`name`,
              activity_action_outcome_versions.`description`,
              activity_action_outcome_versions.`outcome_blob`,
              activity_action_outcome_versions.`outcome_blob_hash`,
              activity_action_outcome_versions.`created_on`,
              activity_action_outcome_versions.`updated_on`,
              activity_action_outcome_versions.`active`
        FROM activity_action_outcome_versions
        """
    
        static member TableName() = "activity_action_outcome_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityActionOutcomeVersion.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityActionOutcomeVersion.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityActionOutcomeVersion.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_action_outcomes`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityActionOutcome =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("actionVersionId")>] ActionVersionId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ActionVersionId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_action_outcomes
(
    id                TEXT    not null
        constraint activity_action_outcomes_pk
            primary key,
    action_version_id TEXT    not null
        constraint activity_action_outcomes_activity_action_versions_id_fk
            references activity_action_versions,
    created_on        TEXT    not null,
    updated_on        TEXT    not null,
    active            integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_action_outcomes.`id`,
              activity_action_outcomes.`action_version_id`,
              activity_action_outcomes.`created_on`,
              activity_action_outcomes.`updated_on`,
              activity_action_outcomes.`active`
        FROM activity_action_outcomes
        """
    
        static member TableName() = "activity_action_outcomes"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityActionOutcome.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityActionOutcome.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityActionOutcome.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_action_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityActionVersionMetadataItem =
        { [<JsonPropertyName("versionId")>] VersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { VersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_action_version_metadata
(
    version_id TEXT not null
        constraint activity_action_version_metadata_activity_action_versions_id_fk
            references activity_action_versions,
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint activity_action_version_metadata_pk
        primary key (version_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_action_version_metadata.`version_id`,
              activity_action_version_metadata.`item_key`,
              activity_action_version_metadata.`item_value`
        FROM activity_action_version_metadata
        """
    
        static member TableName() = "activity_action_version_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityActionVersionMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityActionVersionMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityActionVersionMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_action_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityActionVersionTag =
        { [<JsonPropertyName("versionId")>] VersionId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { VersionId = String.Empty
              Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_action_version_tags
(
    version_id TEXT not null
        constraint activity_action_version_tags_activity_action_versions_id_fk
            references activity_action_versions,
    tag        TEXT not null,
    constraint activity_action_version_tags_pk
        primary key (version_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_action_version_tags.`version_id`,
              activity_action_version_tags.`tag`
        FROM activity_action_version_tags
        """
    
        static member TableName() = "activity_action_version_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityActionVersionTag.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityActionVersionTag.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityActionVersionTag.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_action_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityActionVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("activityActionVersionId")>] ActivityActionVersionId: string
          [<JsonPropertyName("version")>] Version: int64
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("ruleBlob")>] RuleBlob: BlobField
          [<JsonPropertyName("ruleBlobHash")>] RuleBlobHash: string
          [<JsonPropertyName("hasherVersionId")>] HasherVersionId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ActivityActionVersionId = String.Empty
              Version = 0L
              Name = String.Empty
              Description = String.Empty
              RuleBlob = BlobField.Empty()
              RuleBlobHash = String.Empty
              HasherVersionId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_action_versions
(
    id                         TEXT    not null
        constraint activity_action_versions_pk
            primary key,
    activity_action_version_id TEXT    not null
        constraint activity_action_versions_activity_actions_id_fk
            references activity_actions,
    version                    integer not null,
    name                       TEXT    not null,
    description                TEXT    not null,
    rule_blob                  BLOB    not null,
    rule_blob_hash             TEXT    not null,
    hasher_version_id          TEXT    not null
        constraint activity_action_versions_activity_hasher_version_id_fk
            references activity_hasher_version,
    created_on                 TEXT    not null,
    updated_on                 TEXT    not null,
    active                     integer not null,
    constraint activity_action_versions_uk
        unique (activity_action_version_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_action_versions.`id`,
              activity_action_versions.`activity_action_version_id`,
              activity_action_versions.`version`,
              activity_action_versions.`name`,
              activity_action_versions.`description`,
              activity_action_versions.`rule_blob`,
              activity_action_versions.`rule_blob_hash`,
              activity_action_versions.`hasher_version_id`,
              activity_action_versions.`created_on`,
              activity_action_versions.`updated_on`,
              activity_action_versions.`active`
        FROM activity_action_versions
        """
    
        static member TableName() = "activity_action_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityActionVersion.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityActionVersion.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityActionVersion.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_actions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityAction =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("watcherVersionId")>] WatcherVersionId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              WatcherVersionId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_actions
(
    id                 TEXT    not null
        constraint activity_actions_pk
            primary key,
    watcher_version_id TEXT    not null
        constraint activity_actions_activity_watcher_versions_id_fk
            references activity_watcher_versions,
    created_on         TEXT    not null,
    updated_on         TEXT    not null,
    active             integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_actions.`id`,
              activity_actions.`watcher_version_id`,
              activity_actions.`created_on`,
              activity_actions.`updated_on`,
              activity_actions.`active`
        FROM activity_actions
        """
    
        static member TableName() = "activity_actions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityAction.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityAction.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityAction.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_hasher_version`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityHasherVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("hasherId")>] HasherId: string
          [<JsonPropertyName("version")>] Version: int64
          [<JsonPropertyName("hasherBlob")>] HasherBlob: BlobField
          [<JsonPropertyName("hasherBlobHash")>] HasherBlobHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              HasherId = String.Empty
              Version = 0L
              HasherBlob = BlobField.Empty()
              HasherBlobHash = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "activity_hasher_version"
(
    id               TEXT    not null
        constraint activity_hasher_version_pk
            primary key,
    hasher_id        TEXT    not null
        constraint activity_hasher_version_activity_hashers_id_fk
            references activity_hashers,
    version          integer not null,
    hasher_blob      BLOB    not null,
    hasher_blob_hash TEXT    not null,
    created_on       TEXT    not null,
    updated_on       TEXT    not null,
    active           integer not null,
    constraint activity_hasher_version_uk
        unique (hasher_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_hasher_version.`id`,
              activity_hasher_version.`hasher_id`,
              activity_hasher_version.`version`,
              activity_hasher_version.`hasher_blob`,
              activity_hasher_version.`hasher_blob_hash`,
              activity_hasher_version.`created_on`,
              activity_hasher_version.`updated_on`,
              activity_hasher_version.`active`
        FROM activity_hasher_version
        """
    
        static member TableName() = "activity_hasher_version"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityHasherVersion.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityHasherVersion.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityHasherVersion.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_hashers`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityHasher =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_hashers
(
    id         TEXT    not null
        constraint activity_hashers_pk
            primary key,
    tenant_id  TEXT    not null
        constraint activity_hashers_tenants_id_fk
            references tenants,
    created_on TEXT    not null,
    updated_on TEXT    not null,
    active     integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_hashers.`id`,
              activity_hashers.`tenant_id`,
              activity_hashers.`created_on`,
              activity_hashers.`updated_on`,
              activity_hashers.`active`
        FROM activity_hashers
        """
    
        static member TableName() = "activity_hashers"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityHasher.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityHasher.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityHasher.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityMetadataItem =
        { [<JsonPropertyName("activityId")>] ActivityId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: int64 option }
    
        static member Blank() =
            { ActivityId = String.Empty
              ItemKey = String.Empty
              ItemValue = None }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_metadata
(
    activity_id TEXT not null
        constraint activity_metadata_activities_id_fk
            references activities,
    item_key    TEXT not null,
    item_value  integer,
    constraint activity_metadata_pk
        primary key (activity_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_metadata.`activity_id`,
              activity_metadata.`item_key`,
              activity_metadata.`item_value`
        FROM activity_metadata
        """
    
        static member TableName() = "activity_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityTag =
        { [<JsonPropertyName("activityId")>] ActivityId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ActivityId = String.Empty
              Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_tags
(
    activity_id TEXT not null,
    tag         TEXT not null,
    constraint activity_tags_pk
        primary key (activity_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_tags.`activity_id`,
              activity_tags.`tag`
        FROM activity_tags
        """
    
        static member TableName() = "activity_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityTag.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityTag.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityTag.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_watcher_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityWatcherVersionMetadataItem =
        { [<JsonPropertyName("versionId")>] VersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { VersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_watcher_version_metadata
(
    version_id TEXT not null
        constraint activity_watcher_version_metadata_activity_watcher_versions_id_fk
            references activity_watcher_versions,
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint activity_watcher_version_metadata_pk
        primary key (version_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_watcher_version_metadata.`version_id`,
              activity_watcher_version_metadata.`item_key`,
              activity_watcher_version_metadata.`item_value`
        FROM activity_watcher_version_metadata
        """
    
        static member TableName() = "activity_watcher_version_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityWatcherVersionMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityWatcherVersionMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityWatcherVersionMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_watcher_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityWatcherVersionTags =
        { [<JsonPropertyName("versionId")>] VersionId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { VersionId = String.Empty
              Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "activity_watcher_version_tags"
(
    version_id TEXT not null
        constraint activity_watcher_version_tags_activity_watcher_versions_id_fk
            references activity_watcher_versions,
    tag        TEXT not null,
    constraint activity_watcher_version_tags_pk
        primary key (version_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_watcher_version_tags.`version_id`,
              activity_watcher_version_tags.`tag`
        FROM activity_watcher_version_tags
        """
    
        static member TableName() = "activity_watcher_version_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityWatcherVersionTags.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityWatcherVersionTags.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityWatcherVersionTags.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_watcher_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityWatcherVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("watcherId")>] WatcherId: string
          [<JsonPropertyName("version")>] Version: int64
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              WatcherId = String.Empty
              Version = 0L
              Name = String.Empty
              Description = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "activity_watcher_versions"
(
    id          TEXT    not null
        constraint activity_watcher_versions_pk
            primary key,
    watcher_id  TEXT    not null
        constraint activity_watcher_versions_activity_watcher_id_fk
            references activity_watchers,
    version     integer not null,
    name        TEXT    not null,
    description TEXT    not null,
    created_on  TEXT    not null,
    updated_on  TEXT    not null,
    active      integer not null,
    constraint activity_watcher_version_uk
        unique (watcher_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_watcher_versions.`id`,
              activity_watcher_versions.`watcher_id`,
              activity_watcher_versions.`version`,
              activity_watcher_versions.`name`,
              activity_watcher_versions.`description`,
              activity_watcher_versions.`created_on`,
              activity_watcher_versions.`updated_on`,
              activity_watcher_versions.`active`
        FROM activity_watcher_versions
        """
    
        static member TableName() = "activity_watcher_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityWatcherVersion.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityWatcherVersion.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityWatcherVersion.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `activity_watchers`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ActivityWatcher =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              EntityId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE activity_watchers
(
    id         TEXT    not null
        constraint activity_watchers_pk
            primary key,
    entity_id  TEXT    not null
        constraint activity_watchers_entities_id_fk
            references entities,
    created_on TEXT    not null,
    updated_on TEXT    not null,
    active     INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              activity_watchers.`id`,
              activity_watchers.`entity_id`,
              activity_watchers.`created_on`,
              activity_watchers.`updated_on`,
              activity_watchers.`active`
        FROM activity_watchers
        """
    
        static member TableName() = "activity_watchers"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ActivityWatcher.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ActivityWatcher.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ActivityWatcher.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `entities`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type Entity =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty
              Description = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "entities"
(
    id          TEXT    not null
        constraint entities_pk
            primary key,
    tenant_id   TEXT    not null
        constraint entities_tenants_id_fk
            references tenants,
    name        TEXT    not null,
    description TEXT    not null,
    created_on  TEXT    not null,
    updated_on  TEXT    not null,
    active      integer not null,
    constraint entities_uk
        unique (tenant_id, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              entities.`id`,
              entities.`tenant_id`,
              entities.`name`,
              entities.`description`,
              entities.`created_on`,
              entities.`updated_on`,
              entities.`active`
        FROM entities
        """
    
        static member TableName() = "entities"
    
        static member CreateIndexesSql() =
            [ """
              CREATE INDEX entities_name_index
    on entities (name)
              """ ]
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Entity.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Entity.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Entity.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `entity_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type EntityMetadataItem =
        { [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { EntityId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE entity_metadata
(
    entity_id  TEXT not null
        constraint entity_metadata_entities_id_fk
            references entities,
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint entity_metadata_pk
        primary key (entity_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              entity_metadata.`entity_id`,
              entity_metadata.`item_key`,
              entity_metadata.`item_value`
        FROM entity_metadata
        """
    
        static member TableName() = "entity_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ EntityMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  EntityMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  EntityMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `entity_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type EntityTag =
        { [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("tag")>] Tag: int64 option }
    
        static member Blank() =
            { EntityId = String.Empty
              Tag = None }
    
        static member CreateTableSql() = """
        CREATE TABLE entity_tags
(
    entity_id TEXT not null
        constraint entity_tags_entities_id_fk
            references entities,
    tag       integer,
    constraint entity_tags_pk
        primary key (entity_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              entity_tags.`entity_id`,
              entity_tags.`tag`
        FROM entity_tags
        """
    
        static member TableName() = "entity_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ EntityTag.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  EntityTag.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  EntityTag.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `incident_activity_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type IncidentActivityLink =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("incidentId")>] IncidentId: string
          [<JsonPropertyName("activityId")>] ActivityId: string }
    
        static member Blank() =
            { Id = String.Empty
              IncidentId = String.Empty
              ActivityId = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE incident_activity_links
(
    id          TEXT not null
        constraint incident_activity_links_pk
            primary key,
    incident_id TEXT not null
        constraint incident_activity_links_incidents_id_fk
            references incidents,
    activity_id TEXT not null
        constraint incident_activity_links_activities_id_fk
            references activities,
    constraint incident_activity_link_uk
        unique (incident_id, activity_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              incident_activity_links.`id`,
              incident_activity_links.`incident_id`,
              incident_activity_links.`activity_id`
        FROM incident_activity_links
        """
    
        static member TableName() = "incident_activity_links"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ IncidentActivityLink.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  IncidentActivityLink.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  IncidentActivityLink.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `incident_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type IncidentMetadataItem =
        { [<JsonPropertyName("incidentId")>] IncidentId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { IncidentId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE incident_metadata
(
    incident_id TEXT not null,
    item_key    TEXT not null,
    item_value  TEXT not null,
    constraint incident_metadata_pk
        primary key (incident_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              incident_metadata.`incident_id`,
              incident_metadata.`item_key`,
              incident_metadata.`item_value`
        FROM incident_metadata
        """
    
        static member TableName() = "incident_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ IncidentMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  IncidentMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  IncidentMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `incident_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type IncidentTag =
        { [<JsonPropertyName("incidentId")>] IncidentId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { IncidentId = String.Empty
              Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE incident_tags
(
    incident_id TEXT not null
        constraint incident_tags_incidents_id_fk
            references incidents,
    tag         TEXT not null,
    constraint incident_tags_pk
        primary key (incident_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              incident_tags.`incident_id`,
              incident_tags.`tag`
        FROM incident_tags
        """
    
        static member TableName() = "incident_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ IncidentTag.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  IncidentTag.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  IncidentTag.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `incidents`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type Incident =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("closedOn")>] ClosedOn: string option
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              EntityId = String.Empty
              Name = String.Empty
              Description = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              ClosedOn = None
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE incidents
(
    id          TEXT    not null
        constraint incidents_pk
            primary key,
    entity_id   TEXT    not null
        constraint incidents_entities_id_fk
            references entities,
    name        TEXT    not null,
    description TEXT    not null,
    created_on  TEXT    not null,
    updated_on  TEXT    not null,
    closed_on   TEXT,
    active      integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              incidents.`id`,
              incidents.`entity_id`,
              incidents.`name`,
              incidents.`description`,
              incidents.`created_on`,
              incidents.`updated_on`,
              incidents.`closed_on`,
              incidents.`active`
        FROM incidents
        """
    
        static member TableName() = "incidents"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Incident.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Incident.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Incident.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `monitoring_events`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type MonitoringEvents =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("eventType")>] EventType: string
          [<JsonPropertyName("eventBlob")>] EventBlob: BlobField
          [<JsonPropertyName("eventBlobHash")>] EventBlobHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              EventType = String.Empty
              EventBlob = BlobField.Empty()
              EventBlobHash = String.Empty
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE monitoring_events
(
    id              TEXT not null
        constraint monitoring_events_pk
            primary key,
    tenant_id       TEXT not null
        constraint monitoring_events_tenants_id_fk
            references tenants,
    event_type      TEXT not null,
    event_blob      BLOB not null,
    event_blob_hash TEXT not null,
    created_on      TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              monitoring_events.`id`,
              monitoring_events.`tenant_id`,
              monitoring_events.`event_type`,
              monitoring_events.`event_blob`,
              monitoring_events.`event_blob_hash`,
              monitoring_events.`created_on`
        FROM monitoring_events
        """
    
        static member TableName() = "monitoring_events"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ MonitoringEvents.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  MonitoringEvents.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  MonitoringEvents.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_entity_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ProjectEntityLink =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              EntityId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE project_entity_links
(
    id         TEXT    not null
        constraint project_entity_links_pk
            primary key,
    project_id TEXT    not null
        constraint project_entity_links_projects_id_fk
            references projects,
    entity_id  TEXT    not null
        constraint project_entity_links_entities_id_fk
            references entities,
    created_on TEXT    not null,
    updated_on TEXT    not null,
    active     integer not null,
    constraint project_entry_links_uk
        unique (project_id, entity_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_entity_links.`id`,
              project_entity_links.`project_id`,
              project_entity_links.`entity_id`,
              project_entity_links.`created_on`,
              project_entity_links.`updated_on`,
              project_entity_links.`active`
        FROM project_entity_links
        """
    
        static member TableName() = "project_entity_links"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectEntityLink.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectEntityLink.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectEntityLink.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_entity_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ProjectEntityMetadataItem =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { LinkId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE project_entity_metadata
(
    link_id    TEXT not null
        constraint project_entity_metadata_project_entity_links_id_fk
            references project_entity_links,
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint project_entity_metadata_pk
        primary key (link_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_entity_metadata.`link_id`,
              project_entity_metadata.`item_key`,
              project_entity_metadata.`item_value`
        FROM project_entity_metadata
        """
    
        static member TableName() = "project_entity_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectEntityMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectEntityMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectEntityMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_entity_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ProjectEntityTag =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { LinkId = String.Empty
              Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE project_entity_tags
(
    link_id TEXT not null
        constraint project_entity_tags_project_team_links_id_fk
            references project_team_links,
    tag     TEXT not null,
    constraint project_entity_tags_pk
        primary key (link_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_entity_tags.`link_id`,
              project_entity_tags.`tag`
        FROM project_entity_tags
        """
    
        static member TableName() = "project_entity_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectEntityTag.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectEntityTag.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectEntityTag.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ProjectMetadataItem =
        { [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string option }
    
        static member Blank() =
            { ProjectId = String.Empty
              ItemKey = String.Empty
              ItemValue = None }
    
        static member CreateTableSql() = """
        CREATE TABLE project_metadata
(
    project_id TEXT not null
        constraint project_metadata_projects_id_fk
            references projects,
    item_key   TEXT not null,
    item_value TEXT,
    constraint project_metadata_pk
        primary key (project_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_metadata.`project_id`,
              project_metadata.`item_key`,
              project_metadata.`item_value`
        FROM project_metadata
        """
    
        static member TableName() = "project_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ProjectTag =
        { [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ProjectId = String.Empty
              Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE project_tags
(
    project_id TEXT not null
        constraint project_tags_projects_id_fk
            references projects,
    tag        TEXT not null,
    constraint project_tags_pk
        primary key (project_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_tags.`project_id`,
              project_tags.`tag`
        FROM project_tags
        """
    
        static member TableName() = "project_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectTag.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectTag.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectTag.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_team_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ProjectTeamClaim =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { LinkId = String.Empty
              Claim = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "project_team_claims"
(
    link_id TEXT not null
        constraint project_team_claims_project_team_links_id_fk
            references project_team_links,
    claim   TEXT not null,
    constraint project_team_claims_pk
        primary key (link_id, claim)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_team_claims.`link_id`,
              project_team_claims.`claim`
        FROM project_team_claims
        """
    
        static member TableName() = "project_team_claims"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectTeamClaim.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectTeamClaim.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectTeamClaim.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_team_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ProjectTeamLink =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("teamId")>] TeamId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              TeamId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "project_team_links"
(
    id         TEXT    not null
        constraint project_team_links_pk
            primary key,
    project_id TEXT    not null
        constraint project_team_links_projects_id_fk
            references projects,
    team_id    TEXT    not null
        constraint project_team_links_teams_id_fk
            references teams,
    created_on TEXT    not null,
    updated_on TEXT    not null,
    active     integer not null,
    constraint project_team_links_uk
        unique (project_id, team_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_team_links.`id`,
              project_team_links.`project_id`,
              project_team_links.`team_id`,
              project_team_links.`created_on`,
              project_team_links.`updated_on`,
              project_team_links.`active`
        FROM project_team_links
        """
    
        static member TableName() = "project_team_links"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() =
            [ """
              CREATE TRIGGER project_team_links_before_insert_ensure_tenant_ids_match_trigger
    BEFORE INSERT ON project_team_links
    BEGIN
        SELECT RAISE(ABORT, 'A project and team must belong to the same tenant if they are to be linked.')
        WHERE (SELECT tenant_id FROM teams WHERE teams.id = NEW.team_id) != 
              (SELECT tenant_id FROM projects WHERE projects.id = NEW.project_id);
    END
              """ ]
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectTeamLink.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectTeamLink.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectTeamLink.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_team_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type ProjectTeamMetadataItem =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { LinkId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "project_team_metadata"
(
    link_id    TEXT not null
        constraint project_team_metadata_project_team_links_id_fk
            references project_team_links (id),
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint project_team_metadata_pk
        primary key (link_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              project_team_metadata.`link_id`,
              project_team_metadata.`item_key`,
              project_team_metadata.`item_value`
        FROM project_team_metadata
        """
    
        static member TableName() = "project_team_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectTeamMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectTeamMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectTeamMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `projects`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type Project =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool option }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = None }
    
        static member CreateTableSql() = """
        CREATE TABLE "projects"
(
    id         TEXT not null
        constraint projects_pk
            primary key,
    tenant_id  TEXT not null
        constraint projects_tenants_id_fk
            references tenants,
    name       TEXT not null,
    created_on TEXT not null,
    updated_on TEXT not null,
    active     integer
)
        """
    
        static member SelectSql() = """
        SELECT
              projects.`id`,
              projects.`tenant_id`,
              projects.`name`,
              projects.`created_on`,
              projects.`updated_on`,
              projects.`active`
        FROM projects
        """
    
        static member TableName() = "projects"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Project.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Project.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Project.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `team_user_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type TeamUserClaim =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { LinkId = String.Empty
              Claim = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "team_user_claims"
(
    link_id TEXT not null
        constraint team_user_claims_project_team_links_id_fk
            references project_team_links (id),
    claim   TEXT not null,
    constraint team_user_claims_pk
        primary key (link_id, claim)
)
        """
    
        static member SelectSql() = """
        SELECT
              team_user_claims.`link_id`,
              team_user_claims.`claim`
        FROM team_user_claims
        """
    
        static member TableName() = "team_user_claims"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ TeamUserClaim.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  TeamUserClaim.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  TeamUserClaim.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `team_users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type TeamUser =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("teamId")>] TeamId: string
          [<JsonPropertyName("userId")>] UserId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TeamId = String.Empty
              UserId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "team_users"
(
    id         TEXT    not null
        constraint team_users_pk
            primary key,
    team_id    TEXT    not null
        constraint team_user_team_id_fk
            references teams,
    user_id    TEXT    not null
        constraint team_user_users_id_fk
            references users,
    created_on TEXT    not null,
    updated_on TEXT    not null,
    active     integer not null,
    constraint team_user_uk
        unique (team_id, user_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              team_users.`id`,
              team_users.`team_id`,
              team_users.`user_id`,
              team_users.`created_on`,
              team_users.`updated_on`,
              team_users.`active`
        FROM team_users
        """
    
        static member TableName() = "team_users"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ TeamUser.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  TeamUser.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  TeamUser.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `teams`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type Team =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "teams"
(
    id        TEXT not null
        constraint teams_pk
            primary key,
    tenant_id TEXT not null
        constraint teams_tenants_id_fk
            references tenants,
    name      TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              teams.`id`,
              teams.`tenant_id`,
              teams.`name`
        FROM teams
        """
    
        static member TableName() = "teams"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Team.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Team.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Team.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `tenant_user_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type TenantUserClaim =
        { [<JsonPropertyName("tenantUserId")>] TenantUserId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { TenantUserId = String.Empty
              Claim = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "tenant_user_claims"
(
    tenant_user_id TEXT not null
        constraint tenant_user_claims_tenant_users_id_fk
            references tenant_users,
    claim          TEXT not null,
    constraint tenant_user_claims_pk
        primary key (tenant_user_id, claim)
)
        """
    
        static member SelectSql() = """
        SELECT
              tenant_user_claims.`tenant_user_id`,
              tenant_user_claims.`claim`
        FROM tenant_user_claims
        """
    
        static member TableName() = "tenant_user_claims"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ TenantUserClaim.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  TenantUserClaim.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  TenantUserClaim.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `tenant_user_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type TenantUserMetadataItem =
        { [<JsonPropertyName("tenantUserId")>] TenantUserId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { TenantUserId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "tenant_user_metadata"
(
    tenant_user_id TEXT not null
        constraint tenant_user_metadata_tenant_users_id_fk
            references tenant_users,
    item_key       TEXT not null,
    item_value     TEXT not null,
    constraint tenant_user_metadata_pk
        primary key (tenant_user_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              tenant_user_metadata.`tenant_user_id`,
              tenant_user_metadata.`item_key`,
              tenant_user_metadata.`item_value`
        FROM tenant_user_metadata
        """
    
        static member TableName() = "tenant_user_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ TenantUserMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  TenantUserMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  TenantUserMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `tenant_users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type TenantUser =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("userId")>] UserId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              UserId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "tenant_users"
(
    id         TEXT    not null
        constraint tenant_users_pk
            primary key,
    tenant_id  TEXT    not null
        constraint tenant_users_tenants_id_fk
            references tenants,
    user_id    TEXT    not null
        constraint tenant_users_users_id_fk
            references users,
    created_on TEXT    not null,
    updated_on TEXT    not null,
    active     integer not null,
    constraint tenant_users_uk
        unique (tenant_id, user_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              tenant_users.`id`,
              tenant_users.`tenant_id`,
              tenant_users.`user_id`,
              tenant_users.`created_on`,
              tenant_users.`updated_on`,
              tenant_users.`active`
        FROM tenant_users
        """
    
        static member TableName() = "tenant_users"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ TenantUser.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  TenantUser.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  TenantUser.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `tenants`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type Tenant =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "tenants"
(
    id     TEXT    not null
        constraint tenants_pk
            primary key,
    name   TEXT    not null,
    active integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              tenants.`id`,
              tenants.`name`,
              tenants.`active`
        FROM tenants
        """
    
        static member TableName() = "tenants"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Tenant.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Tenant.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Tenant.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type User =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("systemUser")>] SystemUser: int64
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              SystemUser = 0L
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "users"
(
    id          TEXT    not null
        constraint users_pk
            primary key,
    name        TEXT    not null,
    created_on  TEXT    not null,
    updated_on  TEXT    not null,
    system_user integer not null,
    active      integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              users.`id`,
              users.`name`,
              users.`created_on`,
              users.`updated_on`,
              users.`system_user`,
              users.`active`
        FROM users
        """
    
        static member TableName() = "users"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ User.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  User.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  User.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
/// Module generated on 07/10/2024 19:08:19 (utc) via Freql.Tools.
[<RequireQualifiedAccess>]
module Parameters =
    /// <summary>
    /// A record representing a new row in the table `activities`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivity =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("watcherVersionId")>] WatcherVersionId: string
          [<JsonPropertyName("category")>] Category: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              WatcherVersionId = String.Empty
              Category = String.Empty
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `activity_action_outcome_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityActionOutcomeVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("outcomeId")>] OutcomeId: string
          [<JsonPropertyName("version")>] Version: int64
          [<JsonPropertyName("name")>] Name: string option
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("outcomeBlob")>] OutcomeBlob: BlobField
          [<JsonPropertyName("outcomeBlobHash")>] OutcomeBlobHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              OutcomeId = String.Empty
              Version = 0L
              Name = None
              Description = String.Empty
              OutcomeBlob = BlobField.Empty()
              OutcomeBlobHash = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `activity_action_outcomes`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityActionOutcome =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("actionVersionId")>] ActionVersionId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ActionVersionId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `activity_action_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityActionVersionMetadataItem =
        { [<JsonPropertyName("versionId")>] VersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { VersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `activity_action_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityActionVersionTag =
        { [<JsonPropertyName("versionId")>] VersionId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { VersionId = String.Empty
              Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `activity_action_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityActionVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("activityActionVersionId")>] ActivityActionVersionId: string
          [<JsonPropertyName("version")>] Version: int64
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("ruleBlob")>] RuleBlob: BlobField
          [<JsonPropertyName("ruleBlobHash")>] RuleBlobHash: string
          [<JsonPropertyName("hasherVersionId")>] HasherVersionId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ActivityActionVersionId = String.Empty
              Version = 0L
              Name = String.Empty
              Description = String.Empty
              RuleBlob = BlobField.Empty()
              RuleBlobHash = String.Empty
              HasherVersionId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `activity_actions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityAction =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("watcherVersionId")>] WatcherVersionId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              WatcherVersionId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `activity_hasher_version`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityHasherVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("hasherId")>] HasherId: string
          [<JsonPropertyName("version")>] Version: int64
          [<JsonPropertyName("hasherBlob")>] HasherBlob: BlobField
          [<JsonPropertyName("hasherBlobHash")>] HasherBlobHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              HasherId = String.Empty
              Version = 0L
              HasherBlob = BlobField.Empty()
              HasherBlobHash = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `activity_hashers`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityHasher =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `activity_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityMetadataItem =
        { [<JsonPropertyName("activityId")>] ActivityId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: int64 option }
    
        static member Blank() =
            { ActivityId = String.Empty
              ItemKey = String.Empty
              ItemValue = None }
    
    /// <summary>
    /// A record representing a new row in the table `activity_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityTag =
        { [<JsonPropertyName("activityId")>] ActivityId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ActivityId = String.Empty
              Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `activity_watcher_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityWatcherVersionMetadataItem =
        { [<JsonPropertyName("versionId")>] VersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { VersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `activity_watcher_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityWatcherVersionTags =
        { [<JsonPropertyName("versionId")>] VersionId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { VersionId = String.Empty
              Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `activity_watcher_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityWatcherVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("watcherId")>] WatcherId: string
          [<JsonPropertyName("version")>] Version: int64
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              WatcherId = String.Empty
              Version = 0L
              Name = String.Empty
              Description = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `activity_watchers`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewActivityWatcher =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              EntityId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `entities`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewEntity =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty
              Description = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `entity_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewEntityMetadataItem =
        { [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { EntityId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `entity_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewEntityTag =
        { [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("tag")>] Tag: int64 option }
    
        static member Blank() =
            { EntityId = String.Empty
              Tag = None }
    
    /// <summary>
    /// A record representing a new row in the table `incident_activity_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewIncidentActivityLink =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("incidentId")>] IncidentId: string
          [<JsonPropertyName("activityId")>] ActivityId: string }
    
        static member Blank() =
            { Id = String.Empty
              IncidentId = String.Empty
              ActivityId = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `incident_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewIncidentMetadataItem =
        { [<JsonPropertyName("incidentId")>] IncidentId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { IncidentId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `incident_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewIncidentTag =
        { [<JsonPropertyName("incidentId")>] IncidentId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { IncidentId = String.Empty
              Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `incidents`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewIncident =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("closedOn")>] ClosedOn: string option
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              EntityId = String.Empty
              Name = String.Empty
              Description = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              ClosedOn = None
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `monitoring_events`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewMonitoringEvents =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("eventType")>] EventType: string
          [<JsonPropertyName("eventBlob")>] EventBlob: BlobField
          [<JsonPropertyName("eventBlobHash")>] EventBlobHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              EventType = String.Empty
              EventBlob = BlobField.Empty()
              EventBlobHash = String.Empty
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `project_entity_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewProjectEntityLink =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("entityId")>] EntityId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              EntityId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `project_entity_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewProjectEntityMetadataItem =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { LinkId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `project_entity_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewProjectEntityTag =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { LinkId = String.Empty
              Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `project_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewProjectMetadataItem =
        { [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string option }
    
        static member Blank() =
            { ProjectId = String.Empty
              ItemKey = String.Empty
              ItemValue = None }
    
    /// <summary>
    /// A record representing a new row in the table `project_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewProjectTag =
        { [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ProjectId = String.Empty
              Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `project_team_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewProjectTeamClaim =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { LinkId = String.Empty
              Claim = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `project_team_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewProjectTeamLink =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("teamId")>] TeamId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              TeamId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `project_team_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewProjectTeamMetadataItem =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { LinkId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `projects`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewProject =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool option }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = None }
    
    /// <summary>
    /// A record representing a new row in the table `team_user_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewTeamUserClaim =
        { [<JsonPropertyName("linkId")>] LinkId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { LinkId = String.Empty
              Claim = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `team_users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewTeamUser =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("teamId")>] TeamId: string
          [<JsonPropertyName("userId")>] UserId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TeamId = String.Empty
              UserId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `teams`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewTeam =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("name")>] Name: string }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              Name = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `tenant_user_claims`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewTenantUserClaim =
        { [<JsonPropertyName("tenantUserId")>] TenantUserId: string
          [<JsonPropertyName("claim")>] Claim: string }
    
        static member Blank() =
            { TenantUserId = String.Empty
              Claim = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `tenant_user_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewTenantUserMetadataItem =
        { [<JsonPropertyName("tenantUserId")>] TenantUserId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { TenantUserId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `tenant_users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewTenantUser =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("tenantId")>] TenantId: string
          [<JsonPropertyName("userId")>] UserId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              TenantId = String.Empty
              UserId = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `tenants`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewTenant =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    type NewUser =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("updatedOn")>] UpdatedOn: DateTime
          [<JsonPropertyName("systemUser")>] SystemUser: int64
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              UpdatedOn = DateTime.UtcNow
              SystemUser = 0L
              Active = true }
    
/// Module generated on 07/10/2024 19:08:19 (utc) via Freql.Tools.
[<RequireQualifiedAccess>]
module Operations =

    let buildSql (lines: string list) = lines |> String.concat Environment.NewLine

    /// <summary>
    /// Select a `Records.Activity` from the table `activities`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Activity&gt;` and uses Records.Activity.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Activity.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Activity>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Activity&gt;` and uses Records.Activity.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Activity.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Activity>(sql, parameters)
    
    let insertActivity (context: SqliteContext) (parameters: Parameters.NewActivity) =
        context.Insert("activities", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityActionOutcomeVersion` from the table `activity_action_outcome_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityActionOutcomeVersion&gt;` and uses Records.ActivityActionOutcomeVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionOutcomeVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionOutcomeVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityActionOutcomeVersion.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityActionOutcomeVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityActionOutcomeVersion&gt;` and uses Records.ActivityActionOutcomeVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionOutcomeVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionOutcomeVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityActionOutcomeVersion.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityActionOutcomeVersion>(sql, parameters)
    
    let insertActivityActionOutcomeVersion (context: SqliteContext) (parameters: Parameters.NewActivityActionOutcomeVersion) =
        context.Insert("activity_action_outcome_versions", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityActionOutcome` from the table `activity_action_outcomes`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityActionOutcome&gt;` and uses Records.ActivityActionOutcome.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionOutcomeRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionOutcomeRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityActionOutcome.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityActionOutcome>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityActionOutcome&gt;` and uses Records.ActivityActionOutcome.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionOutcomeRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionOutcomeRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityActionOutcome.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityActionOutcome>(sql, parameters)
    
    let insertActivityActionOutcome (context: SqliteContext) (parameters: Parameters.NewActivityActionOutcome) =
        context.Insert("activity_action_outcomes", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityActionVersionMetadataItem` from the table `activity_action_version_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityActionVersionMetadataItem&gt;` and uses Records.ActivityActionVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityActionVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityActionVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityActionVersionMetadataItem&gt;` and uses Records.ActivityActionVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityActionVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityActionVersionMetadataItem>(sql, parameters)
    
    let insertActivityActionVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewActivityActionVersionMetadataItem) =
        context.Insert("activity_action_version_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityActionVersionTag` from the table `activity_action_version_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityActionVersionTag&gt;` and uses Records.ActivityActionVersionTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionVersionTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionVersionTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityActionVersionTag.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityActionVersionTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityActionVersionTag&gt;` and uses Records.ActivityActionVersionTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionVersionTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionVersionTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityActionVersionTag.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityActionVersionTag>(sql, parameters)
    
    let insertActivityActionVersionTag (context: SqliteContext) (parameters: Parameters.NewActivityActionVersionTag) =
        context.Insert("activity_action_version_tags", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityActionVersion` from the table `activity_action_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityActionVersion&gt;` and uses Records.ActivityActionVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityActionVersion.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityActionVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityActionVersion&gt;` and uses Records.ActivityActionVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityActionVersion.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityActionVersion>(sql, parameters)
    
    let insertActivityActionVersion (context: SqliteContext) (parameters: Parameters.NewActivityActionVersion) =
        context.Insert("activity_action_versions", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityAction` from the table `activity_actions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityAction&gt;` and uses Records.ActivityAction.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityAction.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityAction>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityAction&gt;` and uses Records.ActivityAction.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityActionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityActionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityAction.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityAction>(sql, parameters)
    
    let insertActivityAction (context: SqliteContext) (parameters: Parameters.NewActivityAction) =
        context.Insert("activity_actions", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityHasherVersion` from the table `activity_hasher_version`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityHasherVersion&gt;` and uses Records.ActivityHasherVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityHasherVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityHasherVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityHasherVersion.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityHasherVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityHasherVersion&gt;` and uses Records.ActivityHasherVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityHasherVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityHasherVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityHasherVersion.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityHasherVersion>(sql, parameters)
    
    let insertActivityHasherVersion (context: SqliteContext) (parameters: Parameters.NewActivityHasherVersion) =
        context.Insert("activity_hasher_version", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityHasher` from the table `activity_hashers`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityHasher&gt;` and uses Records.ActivityHasher.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityHasherRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityHasherRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityHasher.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityHasher>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityHasher&gt;` and uses Records.ActivityHasher.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityHasherRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityHasherRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityHasher.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityHasher>(sql, parameters)
    
    let insertActivityHasher (context: SqliteContext) (parameters: Parameters.NewActivityHasher) =
        context.Insert("activity_hashers", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityMetadataItem` from the table `activity_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityMetadataItem&gt;` and uses Records.ActivityMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityMetadataItem&gt;` and uses Records.ActivityMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityMetadataItem>(sql, parameters)
    
    let insertActivityMetadataItem (context: SqliteContext) (parameters: Parameters.NewActivityMetadataItem) =
        context.Insert("activity_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityTag` from the table `activity_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityTag&gt;` and uses Records.ActivityTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityTag.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityTag&gt;` and uses Records.ActivityTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityTag.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityTag>(sql, parameters)
    
    let insertActivityTag (context: SqliteContext) (parameters: Parameters.NewActivityTag) =
        context.Insert("activity_tags", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityWatcherVersionMetadataItem` from the table `activity_watcher_version_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityWatcherVersionMetadataItem&gt;` and uses Records.ActivityWatcherVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcherVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityWatcherVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityWatcherVersionMetadataItem&gt;` and uses Records.ActivityWatcherVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcherVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityWatcherVersionMetadataItem>(sql, parameters)
    
    let insertActivityWatcherVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewActivityWatcherVersionMetadataItem) =
        context.Insert("activity_watcher_version_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityWatcherVersionTags` from the table `activity_watcher_version_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityWatcherVersionTags&gt;` and uses Records.ActivityWatcherVersionTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherVersionTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherVersionTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcherVersionTags.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityWatcherVersionTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityWatcherVersionTags&gt;` and uses Records.ActivityWatcherVersionTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherVersionTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherVersionTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcherVersionTags.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityWatcherVersionTags>(sql, parameters)
    
    let insertActivityWatcherVersionTags (context: SqliteContext) (parameters: Parameters.NewActivityWatcherVersionTags) =
        context.Insert("activity_watcher_version_tags", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityWatcherVersion` from the table `activity_watcher_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityWatcherVersion&gt;` and uses Records.ActivityWatcherVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcherVersion.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityWatcherVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityWatcherVersion&gt;` and uses Records.ActivityWatcherVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcherVersion.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityWatcherVersion>(sql, parameters)
    
    let insertActivityWatcherVersion (context: SqliteContext) (parameters: Parameters.NewActivityWatcherVersion) =
        context.Insert("activity_watcher_versions", parameters)
    
    /// <summary>
    /// Select a `Records.ActivityWatcher` from the table `activity_watchers`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ActivityWatcher&gt;` and uses Records.ActivityWatcher.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcher.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ActivityWatcher>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ActivityWatcher&gt;` and uses Records.ActivityWatcher.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectActivityWatcherRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectActivityWatcherRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ActivityWatcher.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ActivityWatcher>(sql, parameters)
    
    let insertActivityWatcher (context: SqliteContext) (parameters: Parameters.NewActivityWatcher) =
        context.Insert("activity_watchers", parameters)
    
    /// <summary>
    /// Select a `Records.Entity` from the table `entities`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Entity&gt;` and uses Records.Entity.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Entity.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Entity>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Entity&gt;` and uses Records.Entity.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Entity.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Entity>(sql, parameters)
    
    let insertEntity (context: SqliteContext) (parameters: Parameters.NewEntity) =
        context.Insert("entities", parameters)
    
    /// <summary>
    /// Select a `Records.EntityMetadataItem` from the table `entity_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.EntityMetadataItem&gt;` and uses Records.EntityMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EntityMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.EntityMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.EntityMetadataItem&gt;` and uses Records.EntityMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EntityMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.EntityMetadataItem>(sql, parameters)
    
    let insertEntityMetadataItem (context: SqliteContext) (parameters: Parameters.NewEntityMetadataItem) =
        context.Insert("entity_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.EntityTag` from the table `entity_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.EntityTag&gt;` and uses Records.EntityTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EntityTag.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.EntityTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.EntityTag&gt;` and uses Records.EntityTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEntityTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEntityTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EntityTag.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.EntityTag>(sql, parameters)
    
    let insertEntityTag (context: SqliteContext) (parameters: Parameters.NewEntityTag) =
        context.Insert("entity_tags", parameters)
    
    /// <summary>
    /// Select a `Records.IncidentActivityLink` from the table `incident_activity_links`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.IncidentActivityLink&gt;` and uses Records.IncidentActivityLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectIncidentActivityLinkRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectIncidentActivityLinkRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.IncidentActivityLink.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.IncidentActivityLink>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.IncidentActivityLink&gt;` and uses Records.IncidentActivityLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectIncidentActivityLinkRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectIncidentActivityLinkRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.IncidentActivityLink.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.IncidentActivityLink>(sql, parameters)
    
    let insertIncidentActivityLink (context: SqliteContext) (parameters: Parameters.NewIncidentActivityLink) =
        context.Insert("incident_activity_links", parameters)
    
    /// <summary>
    /// Select a `Records.IncidentMetadataItem` from the table `incident_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.IncidentMetadataItem&gt;` and uses Records.IncidentMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectIncidentMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectIncidentMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.IncidentMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.IncidentMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.IncidentMetadataItem&gt;` and uses Records.IncidentMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectIncidentMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectIncidentMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.IncidentMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.IncidentMetadataItem>(sql, parameters)
    
    let insertIncidentMetadataItem (context: SqliteContext) (parameters: Parameters.NewIncidentMetadataItem) =
        context.Insert("incident_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.IncidentTag` from the table `incident_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.IncidentTag&gt;` and uses Records.IncidentTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectIncidentTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectIncidentTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.IncidentTag.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.IncidentTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.IncidentTag&gt;` and uses Records.IncidentTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectIncidentTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectIncidentTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.IncidentTag.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.IncidentTag>(sql, parameters)
    
    let insertIncidentTag (context: SqliteContext) (parameters: Parameters.NewIncidentTag) =
        context.Insert("incident_tags", parameters)
    
    /// <summary>
    /// Select a `Records.Incident` from the table `incidents`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Incident&gt;` and uses Records.Incident.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectIncidentRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectIncidentRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Incident.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Incident>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Incident&gt;` and uses Records.Incident.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectIncidentRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectIncidentRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Incident.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Incident>(sql, parameters)
    
    let insertIncident (context: SqliteContext) (parameters: Parameters.NewIncident) =
        context.Insert("incidents", parameters)
    
    /// <summary>
    /// Select a `Records.MonitoringEvents` from the table `monitoring_events`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.MonitoringEvents&gt;` and uses Records.MonitoringEvents.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectMonitoringEventsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectMonitoringEventsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.MonitoringEvents.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.MonitoringEvents>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.MonitoringEvents&gt;` and uses Records.MonitoringEvents.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectMonitoringEventsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectMonitoringEventsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.MonitoringEvents.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.MonitoringEvents>(sql, parameters)
    
    let insertMonitoringEvents (context: SqliteContext) (parameters: Parameters.NewMonitoringEvents) =
        context.Insert("monitoring_events", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectEntityLink` from the table `project_entity_links`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectEntityLink&gt;` and uses Records.ProjectEntityLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEntityLinkRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEntityLinkRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEntityLink.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectEntityLink>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectEntityLink&gt;` and uses Records.ProjectEntityLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEntityLinkRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEntityLinkRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEntityLink.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectEntityLink>(sql, parameters)
    
    let insertProjectEntityLink (context: SqliteContext) (parameters: Parameters.NewProjectEntityLink) =
        context.Insert("project_entity_links", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectEntityMetadataItem` from the table `project_entity_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectEntityMetadataItem&gt;` and uses Records.ProjectEntityMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEntityMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEntityMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEntityMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectEntityMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectEntityMetadataItem&gt;` and uses Records.ProjectEntityMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEntityMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEntityMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEntityMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectEntityMetadataItem>(sql, parameters)
    
    let insertProjectEntityMetadataItem (context: SqliteContext) (parameters: Parameters.NewProjectEntityMetadataItem) =
        context.Insert("project_entity_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectEntityTag` from the table `project_entity_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectEntityTag&gt;` and uses Records.ProjectEntityTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEntityTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEntityTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEntityTag.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectEntityTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectEntityTag&gt;` and uses Records.ProjectEntityTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEntityTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEntityTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEntityTag.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectEntityTag>(sql, parameters)
    
    let insertProjectEntityTag (context: SqliteContext) (parameters: Parameters.NewProjectEntityTag) =
        context.Insert("project_entity_tags", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectMetadataItem` from the table `project_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectMetadataItem&gt;` and uses Records.ProjectMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectMetadataItem&gt;` and uses Records.ProjectMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectMetadataItem>(sql, parameters)
    
    let insertProjectMetadataItem (context: SqliteContext) (parameters: Parameters.NewProjectMetadataItem) =
        context.Insert("project_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectTag` from the table `project_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectTag&gt;` and uses Records.ProjectTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTag.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectTag&gt;` and uses Records.ProjectTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTag.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectTag>(sql, parameters)
    
    let insertProjectTag (context: SqliteContext) (parameters: Parameters.NewProjectTag) =
        context.Insert("project_tags", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectTeamClaim` from the table `project_team_claims`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectTeamClaim&gt;` and uses Records.ProjectTeamClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamClaimRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamClaimRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamClaim.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectTeamClaim>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectTeamClaim&gt;` and uses Records.ProjectTeamClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamClaimRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamClaimRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamClaim.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectTeamClaim>(sql, parameters)
    
    let insertProjectTeamClaim (context: SqliteContext) (parameters: Parameters.NewProjectTeamClaim) =
        context.Insert("project_team_claims", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectTeamLink` from the table `project_team_links`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectTeamLink&gt;` and uses Records.ProjectTeamLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamLinkRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamLinkRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamLink.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectTeamLink>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectTeamLink&gt;` and uses Records.ProjectTeamLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamLinkRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamLinkRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamLink.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectTeamLink>(sql, parameters)
    
    let insertProjectTeamLink (context: SqliteContext) (parameters: Parameters.NewProjectTeamLink) =
        context.Insert("project_team_links", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectTeamMetadataItem` from the table `project_team_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectTeamMetadataItem&gt;` and uses Records.ProjectTeamMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectTeamMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectTeamMetadataItem&gt;` and uses Records.ProjectTeamMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectTeamMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectTeamMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectTeamMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectTeamMetadataItem>(sql, parameters)
    
    let insertProjectTeamMetadataItem (context: SqliteContext) (parameters: Parameters.NewProjectTeamMetadataItem) =
        context.Insert("project_team_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Project` from the table `projects`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Project&gt;` and uses Records.Project.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Project.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Project>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Project&gt;` and uses Records.Project.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Project.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Project>(sql, parameters)
    
    let insertProject (context: SqliteContext) (parameters: Parameters.NewProject) =
        context.Insert("projects", parameters)
    
    /// <summary>
    /// Select a `Records.TeamUserClaim` from the table `team_user_claims`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.TeamUserClaim&gt;` and uses Records.TeamUserClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamUserClaimRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamUserClaimRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TeamUserClaim.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.TeamUserClaim>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.TeamUserClaim&gt;` and uses Records.TeamUserClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamUserClaimRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamUserClaimRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TeamUserClaim.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.TeamUserClaim>(sql, parameters)
    
    let insertTeamUserClaim (context: SqliteContext) (parameters: Parameters.NewTeamUserClaim) =
        context.Insert("team_user_claims", parameters)
    
    /// <summary>
    /// Select a `Records.TeamUser` from the table `team_users`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.TeamUser&gt;` and uses Records.TeamUser.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamUserRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamUserRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TeamUser.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.TeamUser>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.TeamUser&gt;` and uses Records.TeamUser.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamUserRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamUserRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TeamUser.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.TeamUser>(sql, parameters)
    
    let insertTeamUser (context: SqliteContext) (parameters: Parameters.NewTeamUser) =
        context.Insert("team_users", parameters)
    
    /// <summary>
    /// Select a `Records.Team` from the table `teams`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Team&gt;` and uses Records.Team.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Team.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Team>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Team&gt;` and uses Records.Team.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTeamRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTeamRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Team.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Team>(sql, parameters)
    
    let insertTeam (context: SqliteContext) (parameters: Parameters.NewTeam) =
        context.Insert("teams", parameters)
    
    /// <summary>
    /// Select a `Records.TenantUserClaim` from the table `tenant_user_claims`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.TenantUserClaim&gt;` and uses Records.TenantUserClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserClaimRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserClaimRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUserClaim.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.TenantUserClaim>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.TenantUserClaim&gt;` and uses Records.TenantUserClaim.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserClaimRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserClaimRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUserClaim.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.TenantUserClaim>(sql, parameters)
    
    let insertTenantUserClaim (context: SqliteContext) (parameters: Parameters.NewTenantUserClaim) =
        context.Insert("tenant_user_claims", parameters)
    
    /// <summary>
    /// Select a `Records.TenantUserMetadataItem` from the table `tenant_user_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.TenantUserMetadataItem&gt;` and uses Records.TenantUserMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUserMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.TenantUserMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.TenantUserMetadataItem&gt;` and uses Records.TenantUserMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUserMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.TenantUserMetadataItem>(sql, parameters)
    
    let insertTenantUserMetadataItem (context: SqliteContext) (parameters: Parameters.NewTenantUserMetadataItem) =
        context.Insert("tenant_user_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.TenantUser` from the table `tenant_users`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.TenantUser&gt;` and uses Records.TenantUser.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUser.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.TenantUser>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.TenantUser&gt;` and uses Records.TenantUser.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantUserRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantUserRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.TenantUser.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.TenantUser>(sql, parameters)
    
    let insertTenantUser (context: SqliteContext) (parameters: Parameters.NewTenantUser) =
        context.Insert("tenant_users", parameters)
    
    /// <summary>
    /// Select a `Records.Tenant` from the table `tenants`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Tenant&gt;` and uses Records.Tenant.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Tenant.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Tenant>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Tenant&gt;` and uses Records.Tenant.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTenantRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTenantRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Tenant.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Tenant>(sql, parameters)
    
    let insertTenant (context: SqliteContext) (parameters: Parameters.NewTenant) =
        context.Insert("tenants", parameters)
    
    /// <summary>
    /// Select a `Records.User` from the table `users`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.User&gt;` and uses Records.User.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectUserRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectUserRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.User.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.User>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.User&gt;` and uses Records.User.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 07/10/2024 19:08:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectUserRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectUserRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.User.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.User>(sql, parameters)
    
    let insertUser (context: SqliteContext) (parameters: Parameters.NewUser) =
        context.Insert("users", parameters)
    
[<RequireQualifiedAccess>]
module Initialization =
    let sql (checkIfExists: bool) =
        [ Records.Tenant.InitializationSql checkIfExists
          Records.Entity.InitializationSql checkIfExists
          Records.ActivityWatcher.InitializationSql checkIfExists
          Records.ActivityWatcherVersion.InitializationSql checkIfExists
          Records.ActivityHasher.InitializationSql checkIfExists
          Records.ActivityAction.InitializationSql checkIfExists
          Records.ActivityHasherVersion.InitializationSql checkIfExists
          Records.User.InitializationSql checkIfExists
          Records.Project.InitializationSql checkIfExists
          Records.Team.InitializationSql checkIfExists
          Records.ActivityActionVersion.InitializationSql checkIfExists
          Records.TenantUser.InitializationSql checkIfExists
          Records.ProjectTeamLink.InitializationSql checkIfExists
          Records.ProjectEntityLink.InitializationSql checkIfExists
          Records.Incident.InitializationSql checkIfExists
          Records.Activity.InitializationSql checkIfExists
          Records.ActivityActionOutcome.InitializationSql checkIfExists
          Records.TenantUserMetadataItem.InitializationSql checkIfExists
          Records.TenantUserClaim.InitializationSql checkIfExists
          Records.TeamUser.InitializationSql checkIfExists
          Records.TeamUserClaim.InitializationSql checkIfExists
          Records.ProjectTeamMetadataItem.InitializationSql checkIfExists
          Records.ProjectTeamClaim.InitializationSql checkIfExists
          Records.ProjectTag.InitializationSql checkIfExists
          Records.ProjectMetadataItem.InitializationSql checkIfExists
          Records.ProjectEntityTag.InitializationSql checkIfExists
          Records.ProjectEntityMetadataItem.InitializationSql checkIfExists
          Records.MonitoringEvents.InitializationSql checkIfExists
          Records.IncidentTag.InitializationSql checkIfExists
          Records.IncidentMetadataItem.InitializationSql checkIfExists
          Records.IncidentActivityLink.InitializationSql checkIfExists
          Records.EntityTag.InitializationSql checkIfExists
          Records.EntityMetadataItem.InitializationSql checkIfExists
          Records.ActivityWatcherVersionTags.InitializationSql checkIfExists
          Records.ActivityWatcherVersionMetadataItem.InitializationSql checkIfExists
          Records.ActivityTag.InitializationSql checkIfExists
          Records.ActivityMetadataItem.InitializationSql checkIfExists
          Records.ActivityActionVersionTag.InitializationSql checkIfExists
          Records.ActivityActionVersionMetadataItem.InitializationSql checkIfExists
          Records.ActivityActionOutcomeVersion.InitializationSql checkIfExists ]
        |> List.concat

    let run (checkIfExists: bool) (ctx: SqliteContext) =
        sql checkIfExists |> List.iter (ctx.ExecuteSqlNonQuery >> ignore)

    let runInTransaction (checkIfExists: bool) (ctx: SqliteContext) =
        ctx.ExecuteInTransaction(fun t -> sql checkIfExists |> List.iter (t.ExecuteSqlNonQuery >> ignore))
